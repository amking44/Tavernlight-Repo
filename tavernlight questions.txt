//Q1 - Fix or improve the implementation of the below methods
local function releaseStorage(player)

    player:setStorageValue(1000, -1)
    
end

function onLogout(player)
    
    if player:getStorageValue(1000) == 1 then
    
        addEvent(releaseStorage, 1000, player)
    
    end
    
    return true
    
end


//Q2 Fix or improve the implementation of the below method
-- while doing some digging and looking around the OTClient I set up for q5-7, I found a lot of similarities between these questions and that code so I used some patterns I found in that
-- One specific example is in this function, I found that the database code is almost identical to that of the OTClient,
-- That being said, 'result' is a DBResultPtr(shared_object_ptr of type DBResult) and I used those functions accordingly
function printSmallGuildNames(memberCount)

    -- this method is supposed to print names of all guilds that have less than memberCount max members
    
    local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
    
    local result = db.storeQuery(string.format(selectGuildQuery, memberCount)) -- renamed from resultId to result
    
    -- first thing's first, we need to loop. after doing some digging, I found that this way works for looping through the query

    if result ~= false then -- if the query return false, dont even worry about looping 
		
        repeat
			print(result.getDataString("name")) -- this is the specific function used from DBResult, based on the original format, I'd assume 'result.getString("name")' would work too
		until not result.next() -- this is what keeps the do-while/repeat-until loop going. Once this returns false, it exits the loop.

		result.free() -- this frees the memory used by the pointer in the database.h/cpp
	end
end

//Q3 Fix or improve the name and the implementation of the below method
-- renamed, originally do_sth_with_PlayerParty
function kickMemberFromPlayerParty(playerId, membername)

    local player = Player(playerId)
    
    -- delcare a local variable for who to kick instead of creating a whole new Player twice at 'call 1' and 'call 2'
    -- I do this when I have to use an object more than once for checks if that object doesn't change (like below)
    local memberToKick = Player(membername)

    local party = player:getParty()

    for k,v in pairs(party:getMembers()) do

        if v == memberToKick then -- call 1

            party:removeMember(memberToKick) -- call 2
            -- I add a return/break keyword in cases like this becuase we don't need to loop anymore if we found the one we're looking for
            return;

        end

    end

end

//Q4 Assume all method calls work fine. Fix the memory leak issue in below method
void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{

    -- The principle I learned was, "For every heap allocation (new keyword), we need to call delete or track that memeory elsewhere"
    -- The following changes stem from that idea
    Player* player = g_game.getPlayerByName(recipient); -- local pointer, must use delete on later if the data is not reassigned

    if (!player) 
    {
        player = new Player(nullptr);

        if (!IOLoginData::loadPlayerByName(player, recipient)) 
        {
            -- originally, this didn't delete the new Player created
            -- when the if check fails (player was not loaded), we need to free up that memeory
            delete player;
            return;
        }
    }

    Item* item = Item::CreateItem(itemId); -- another local pointer, will need to delete or track elsewhere

    if (!item) -- assumed to be false when CreateItem returns nullptr or fails to retrive item 
    {
        -- the return keyword was here originally, so I'm going to assume we want to leave the function because the item doesn't exist
        -- at this point, the first if check wasn't reached, so we have NOT deleted or tracked 'player' elsewhere
        -- that being said, we need to delete both player and item because the player was never modified, meaning we don't need to save the player
        delete player;
        delete item;
        return;
    }

    g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT)

    if (player->isOffline()) 
    {
        IOLoginData::savePlayer(player);
    }

}